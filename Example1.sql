--Задание 1

--Создание функции
CREATE OR REPLACE FUNCTION SUM_NUMBERS
       (A IN NUMBER, B IN NUMBER)
       RETURN NUMBER
IS
BEGIN
  RETURN (A + B);
END;

--Первый вариант использования
DECLARE
  X NUMBER := 555555;
  Y NUMBER := 333333;
  Z NUMBER;
BEGIN
  Z := SUM_NUMBERS(X, Y);
  DBMS_OUTPUT.PUT_LINE(Z);
END;

--Второй вариант использования
BEGIN
  DBMS_OUTPUT.PUT_LINE(SUM_NUMBERS(A => 6, B => 7));
END;

--Задание 2

CREATE TYPE NUMBER_ARRAY IS TABLE OF NUMBER; -- Создание коллекции 
 
-- Создание функции, которая принимает на вход значения массива и возвращает их сумму
CREATE OR REPLACE FUNCTION SUM_OF_NUM_ARRAY(NUMBERS IN NUMBER_ARRAY) RETURN NUMBER
AS
  SUMM NUMBER;
BEGIN
  SELECT SUM(COLUMN_VALUE)
    INTO SUMM
    FROM TABLE(NUMBERS);
  
  RETURN SUMM;
END;
 

DECLARE
  SAMPLEE NUMBER_ARRAY;
BEGIN
  SAMPLEE := NUMBER_ARRAY();
  
  SAMPLEE.EXTEND;
  SAMPLEE(SAMPLEE.COUNT) := 109;
  
  SAMPLEE.EXTEND;
  SAMPLEE(SAMPLEE.COUNT) := -234;
  
  SAMPLEE.EXTEND;
  SAMPLEE(SAMPLEE.COUNT) := 351;
  
  DBMS_OUTPUT.PUT_LINE( TO_CHAR(SUM_OF_NUM_ARRAY(SAMPLEE)));
END;

--Задание 3

CREATE OR REPLACE FUNCTION CURRENT_TIME
       RETURN STRING
IS
BEGIN
  RETURN TO_CHAR(SYSDATE, 'DD.MM.YYYY HH:MI:SS');
END;

BEGIN
  DBMS_OUTPUT.PUT_LINE(CURRENT_TIME);
END;

--Задание 4

CREATE OR REPLACE FUNCTION NUM_OUT_OF_STRING
       (VAR1 STRING, VAR2 STRING) 
       RETURN STRING
IS

 SAMPLE1 STRING(300);
 SAMPLE2 STRING(300);
 UNION_STRING STRING(600);
 
BEGIN
  
 SAMPLE1 := REGEXP_REPLACE (VAR1,'[^[[:alpha:]]]*'); --ОБРАОТКА ПЕРВОЙ СТРОКИ
 SAMPLE2 := REGEXP_REPLACE (VAR2,'[^[[:alpha:]]]*'); --ОБРАОТКА ВТОРОЙ СТРОКИ
 UNION_STRING := CONCAT(SAMPLE1, SAMPLE2); --ОБЪЕДИНЕНИЕ СТРОК
 
 RETURN UNION_STRING;
 
END NUM_OUT_OF_STRING;


BEGIN
 DBMS_OUTPUT.PUT_LINE(NUM_OUT_OF_STRING('П4ри3в67е3т','Юз45е31р'));
END;

--Задание 5

CREATE TABLE CHEFS
(
 CHEF_ID NUMBER NOT NULL,
 CHEF_NAME VARCHAR(100) NOT NULL,
 BIRTH_DATE DATE NOT NULL
);

--Секвенция для автоматического присваивания следующего id
CREATE SEQUENCE CHEFS_SEQ 
  MINVALUE 1
  START WITH 1
  INCREMENT BY 1
  CACHE 25;
	

INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES 
  (CHEFS_SEQ.NEXTVAL,'Иванов Иван Иванович', TO_DATE('19.08.1981', 'dd.mm.yyyy'));

INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES
  (CHEFS_SEQ.NEXTVAL,'Данилов Данил Данилович', TO_DATE('10.02.2003', 'dd.mm.yyyy'));

INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES
  (CHEFS_SEQ.NEXTVAL,'Андреев Андрей Андреевич', TO_DATE('17.03.1982', 'dd.mm.yyyy'));

INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES 
  (CHEFS_SEQ.NEXTVAL,'Павлов Павел Павлович', TO_DATE('08.05.1978', 'dd.mm.yyyy'));

INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES
  (CHEFS_SEQ.NEXTVAL,'Николаев Николай Николаевич', TO_DATE('29.01.1999', 'dd.mm.yyyy'));

INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES
  (CHEFS_SEQ.NEXTVAL,'Дмитриев Дмитрий Дмитриевич', TO_DATE('21.09.2002', 'dd.mm.yyyy'));

INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES 
  (CHEFS_SEQ.NEXTVAL,'Миронова Елизовета Петровна', TO_DATE('10.02.2000', 'dd.mm.yyyy'));

INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES
  (CHEFS_SEQ.NEXTVAL,'Асипова Мария Анатольевна', TO_DATE('06.10.2001', 'dd.mm.yyyy'));

INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES
  (CHEFS_SEQ.NEXTVAL,'Тиньков Олег Сбербанкович', TO_DATE('25.12.1967', 'dd.mm.yyyy'));
  
INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES
  (CHEFS_SEQ.NEXTVAL,'Путин Владимир Владимирович', TO_DATE('05.10.1952', 'dd.mm.yyyy')); 
	 
INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES 
  (CHEFS_SEQ.NEXTVAL,'Погудин Андрей Денисович', TO_DATE('09.08.2001', 'dd.mm.yyyy'));

INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES
  (CHEFS_SEQ.NEXTVAL,'Погудина Мария Вадимовна', TO_DATE('30.05.2000', 'dd.mm.yyyy'));

INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES
  (CHEFS_SEQ.NEXTVAL,'Станиславский Станислав Станиславович', TO_DATE('17.03.1982', 'dd.mm.yyyy'));

INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES 
  (CHEFS_SEQ.NEXTVAL,'Карпов Михаил Артёмович', TO_DATE('08.05.1978', 'dd.mm.yyyy'));

INSERT INTO CHEFS(CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES
  (CHEFS_SEQ.NEXTVAL,'Кузяев Андрей Равелевич', TO_DATE('06.10.1965', 'dd.mm.yyyy'));

	
SELECT * FROM CHEFS CH

--Задание 6

CREATE OR REPLACE PROCEDURE ADD_CHEFS (CHEF_NAMES IN VARCHAR2, CHEF_BIRTH_DATE IN VARCHAR2, O_RES OUT VARCHAR2) AS
BEGIN
    INSERT INTO CHEFS (CHEF_ID, CHEF_NAME, BIRTH_DATE) VALUES (CHEFS_SEQ.NEXTVAL, CHEF_NAMES, CHEF_BIRTH_DATE);
    COMMIT;
    EXCEPTION WHEN OTHERS THEN O_RES := SQLCODE; --Обработка исключений
END;


DECLARE
    O_RES VARCHAR2(4000);
BEGIN
    ADD_CHEFS ('Микрюков Никита Андреевич', '25.06.1999', O_RES);
    DBMS_OUTPUT.PUT_LINE('Res: ' || O_RES);
END;

--Задание 7

CREATE TABLE COOKING_SKILLS     
( 
  SKILL_ID NUMBER NOT NULL,
  SKILL_NAME VARCHAR2(100) NOT NULL
);

--Секвенция для автоматического присваивания следующего id
CREATE SEQUENCE SKILLS_SEQ 
  MINVALUE 1
  START WITH 1
  INCREMENT BY 1
  CACHE 25;


INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME) 
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Торты');

INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME) 
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Пирожные');

INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME) 
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Лапша с куричей');

INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME)
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Суп');

INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME) 
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Суши/Роллы');

INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME) 
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Салаты');

INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME) 
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Овощное рагу');

INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME)
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Мясо на гриле');
  
INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME)
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Рыба');
  
INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME)
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Отбивная');
  
INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME)
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Заливное');
  
INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME)
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Жаркое');
  
INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME)
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Пельмени');
  
INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME)
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Павидло');

INSERT INTO COOKING_SKILLS
  (SKILL_ID, SKILL_NAME) 
   VALUES 
  (SKILLS_SEQ.NEXTVAL,'Печенье');

--Задание 8

--Собираем поля из двух таблиц в одну, решил использовать условие SKILL_ID = CHEF_ID т.к. в задании не было указано, как должна была быть реализована связь поваров с умениями.
CREATE TABLE CHEF_SKILL_LINKS
AS 
  SELECT CHEF_ID, SKILL_ID 
  FROM COOKING_SKILLS 
  INNER JOIN CHEFS ON SKILL_ID = CHEF_ID;

--Добавляем столбец с датой получения навыка
ALTER TABLE CHEF_SKILL_LINKS ADD CHEF_SKILL_DATE DATE;
--Устанавливаем первично значение для всех 
UPDATE CHEF_SKILL_LINKS SET CHEF_SKILL_DATE = TO_DATE('2014/07/22', 'yyyy/mm/dd');
--Далее редактируем даты
UPDATE CHEF_SKILL_LINKS CSL SET CHEF_SKILL_DATE = TO_DATE('2013/01/10', 'yyyy/mm/dd')
WHERE CSL.CHEF_ID = 3;

UPDATE CHEF_SKILL_LINKS CSL SET CHEF_SKILL_DATE = TO_DATE('2005/08/30', 'yyyy/mm/dd')
WHERE CSL.CHEF_ID = 4;

UPDATE CHEF_SKILL_LINKS CSL SET CHEF_SKILL_DATE = TO_DATE('2016/02/18', 'yyyy/mm/dd')
WHERE CSL.CHEF_ID = 5;
--и т.д.
--Задание 9

--Первый вариант
SELECT CH.CHEF_NAME, CH.BIRTH_DATE FROM CHEFS CH, COOKING_SKILLS CS, CHEF_SKILL_LINKS CSL
WHERE CSL.CHEF_ID = CH.CHEF_ID
AND CSL.SKILL_ID = CS.SKILL_ID
AND CS.SKILL_NAME LIKE '%Торт%'
--Второй вариант
SELECT CH.CHEF_NAME, CH.BIRTH_DATE FROM CHEFS CH
JOIN CHEF_SKILL_LINKS CSL ON CSL.CHEF_ID = CH.CHEF_ID
JOIN COOKING_SKILLS CS ON CS.SKILL_ID = CSL.SKILL_ID
WHERE CS.SKILL_NAME LIKE '%Торт%'

--Задание 10

CREATE OR REPLACE FUNCTION YOUNGEST_CHEF
RETURN DATE
IS VERY_YOUNG_CHEF DATE;
BEGIN
	SELECT MAX(CH.BIRTH_DATE) INTO VERY_YOUNG_CHEF FROM CHEFS CH;
RETURN VERY_YOUNG_CHEF;
END;  

BEGIN
	DBMS_OUTPUT.PUT_LINE(YOUNGEST_CHEF); 
END;


--Задание 11

SELECT CC.CHEF_ID, CC.CHEF_NAME, CC.BIRTH_DATE, CC.SKILL_NAME 
FROM
       (SELECT 
              CASE WHEN (EXTRACT (YEAR FROM CURRENT_DATE) - EXTRACT (YEAR FROM CH.BIRTH_DATE))>= 30 THEN 1 ELSE NULL END 
                AS SPPORT_ROW, 
                   CH.CHEF_ID,
                   CH.CHEF_NAME,
                   CH.BIRTH_DATE,
				CS.SKILL_NAME 

        FROM       CHEFS CH
				JOIN CHEF_SKILL_LINKS CSL ON CSL.CHEF_ID = CH.CHEF_ID
				JOIN COOKING_SKILLS CS ON CS.SKILL_ID = CSL.SKILL_ID) CC
         
WHERE CC.SPPORT_ROW IS NOT NULL

--Задание 12

SELECT CC.CHEF_NAME 
FROM
       (SELECT 
              CASE WHEN (EXTRACT (YEAR FROM CSL.CHEF_SKILL_DATE) - EXTRACT (YEAR FROM CH.BIRTH_DATE))<= 20 THEN 1 ELSE NULL END 
                AS SPPORT_ROW, 
                   CH.CHEF_ID,
                   CH.CHEF_NAME,
                   CH.BIRTH_DATE,
        CS.SKILL_NAME 

        FROM       CHEFS CH
        JOIN CHEF_SKILL_LINKS CSL ON CSL.CHEF_ID = CH.CHEF_ID
        JOIN COOKING_SKILLS CS ON CS.SKILL_ID = CSL.SKILL_ID) CC
         
WHERE CC.SPPORT_ROW IS NOT NULL
AND CC.SKILL_NAME LIKE '%Пирожные%'

--Задание 13

CREATE OR REPLACE FUNCTION ID_TO_NAME (ID_OF_THE_CHEF NUMBER)
RETURN STRING
IS NAME_OF_THE_CHEF STRING(100);
BEGIN
	SELECT CH.CHEF_NAME INTO NAME_OF_THE_CHEF FROM CHEFS CH
	WHERE CH.CHEF_ID = ID_OF_THE_CHEF;
	RETURN NAME_OF_THE_CHEF;
END;


BEGIN
	DBMS_OUTPUT.PUT_LINE(ID_TO_NAME(12)); 
END;  

--Задание 14

SELECT * FROM CHEFS CH
WHERE CH.CHEF_NAME LIKE 'П%'

--Задание 15

SELECT 
  TRUNC(MONTHS_BETWEEN(CURRENT_DATE, CH.BIRTH_DATE)/120)*10 || '-' || (TRUNC(MONTHS_BETWEEN(CURRENT_DATE, CH.BIRTH_DATE)/120)+1)*10 "Возрастная категория", 
  COUNT (*) "Кол-во поваров" 
FROM CHEFS CH
  JOIN CHEF_SKILL_LINKS CSL ON CSL.CHEF_ID = CH.CHEF_ID 
	JOIN COOKING_SKILLS CS ON CS.SKILL_ID = CSL.SKILL_ID AND CS.SKILL_NAME LIKE '%Суп%'
GROUP BY TRUNC(MONTHS_BETWEEN(CURRENT_DATE, CH.BIRTH_DATE)/120);

--Задание 16

Группы: Бизнес-ланчи, комплексные обеды, меню завтраков.
Категории: молекулярная кухня, сашими, гриль.

CREATE TABLE CHEF_SKILL_GROUPS
(SKILL_ID NUMBER NOT NULL,
 GROUP_ID NUMBER NOT NULL,
 GROUP_NAME VARCHAR2(150) NOT NULL);
 
INSERT INTO CHEF_SKILL_GROUPS (SKILL_ID, GROUP_ID, GROUP_NAME)
VALUES 
(1, 1, 'Выпечка');

INSERT INTO CHEF_SKILL_GROUPS (SKILL_ID, GROUP_ID, GROUP_NAME)
VALUES 
(2, 1, 'Выпечка');

INSERT INTO CHEF_SKILL_GROUPS (SKILL_ID, GROUP_ID, GROUP_NAME)
VALUES 
(15, 1, 'Выпечка');

INSERT INTO CHEF_SKILL_GROUPS (SKILL_ID, GROUP_ID, GROUP_NAME)
VALUES 
(3, 2, 'Горячее');


CREATE TABLE CHEF_SKILL_CATEGORIES
(SKILL_ID NUMBER NOT NULL,
 CATEGORIE_ID NUMBER NOT NULL,
 CATEGORIE_NAME VARCHAR2(150) NOT NULL)
 
INSERT INTO CHEF_SKILL_GROUPS (SKILL_ID, GROUP_ID, GROUP_NAME)
VALUES 
(1, 1, 'Блюдо, требующее навыка Кондитерские изделия');

INSERT INTO CHEF_SKILL_GROUPS (SKILL_ID, GROUP_ID, GROUP_NAME)
VALUES 
(2, 1, 'Блюдо, требующее навыка Кондитерские изделия');

INSERT INTO CHEF_SKILL_GROUPS (SKILL_ID, GROUP_ID, GROUP_NAME)
VALUES 
(8, 2, 'Блюдо, требующее навыка Гриль');

INSERT INTO CHEF_SKILL_GROUPS (SKILL_ID, GROUP_ID, GROUP_NAME)
VALUES 
(3, 2, 'Блюдо, требующее навыка Гриль');
