--Oracle SQL Developer 21.4.3, PL/SQL Developer Version 15.0.1.2051
--Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production Version 19.3.0.0.0

--Задание 1

SELECT CLIENT_ID AS "Клиент", REPORT_DATE AS "Дата", TOTAL_USD AS "Сумма операции"
FROM
(SELECT 
  TR.CLIENT_ID, 
  TR.REPORT_DATE,
  TR.TXN_AMOUNT * RTS.CCY_RATE AS TOTAL_USD --КОНВЕРТИРУЕМ В USD
 FROM TRANSACTIONS TR
 JOIN RATES RTS ON RTS.REPORT_DATE <= TR.REPORT_DATE --УЧЁТ РАБОЧИХ/ВЫХОДНЫХ ДНЕЙ
 WHERE RTS.CCY_CODE = 840); 

--Задание 2

WITH DEBIT_AM AS --ВЫБОРКА DEBIT_AMOUNT
(SELECT CLIENT_ID, REPORT_DATE, VSP_NUMBER, TXN_TYPE, TXN_AMOUNT,
  COALESCE(SUM(TXN_AMOUNT) OVER (PARTITION BY 'debit' ORDER BY CLIENT_ID, TXN_TYPE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 0) AS DEBIT_AMOUNT 
  FROM VSP_OPER_DATA
  WHERE TXN_TYPE = 'debit'),
  
CREDIT_AM AS --ВЫБОРКА CREDIT_AMOUNT
(SELECT CLIENT_ID, REPORT_DATE, VSP_NUMBER, TXN_TYPE, TXN_AMOUNT,
  COALESCE(SUM(TXN_AMOUNT) OVER ( PARTITION BY  'credit' ORDER BY CLIENT_ID, TXN_TYPE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),0) AS CREDIT_AMOUNT
  FROM VSP_OPER_DATA
  WHERE TXN_TYPE = 'credit'),
  
SUPPORT_UNION AS --СОВМЕЩЕНИЕ DEBIT_AM И CREDIT_AM
 (SELECT 
  CREDIT_AM.CLIENT_ID, CREDIT_AMOUNT, DEBIT_AMOUNT 
 FROM CREDIT_AM, DEBIT_AM
 WHERE DEBIT_AM.CLIENT_ID = CREDIT_AM.CLIENT_ID)
 
SELECT DISTINCT --ОКОНЧАТЕЛЬНАЯ ВЫБОРКА 
 VSP_OPER_DATA.CLIENT_ID, 
 TO_CHAR(REPORT_DATE, 'MONTH') AS REPORT_DATE,
 CREDIT_AMOUNT, DEBIT_AMOUNT,
 VSP_OPER_DATA.VSP_NUMBER AS LAST_VSP 
FROM VSP_OPER_DATA JOIN SUPPORT_UNION ON VSP_OPER_DATA.CLIENT_ID = SUPPORT_UNION.CLIENT_ID

--Задание 3

WITH PERCENTAGE AS --ПОЛУЧАЕМ ДОЛЮ DEBIT ОПЕРАЦИЙ
(
SELECT CLIENT_ID, 
TO_CHAR(ROUND(COUNT(CASE WHEN TXN_TYPE = 'debit' THEN 1 END)/COUNT(TXN_TYPE), 3)*100) || '%' RATIO 
FROM VSP_OPER_DATA VSP GROUP BY CLIENT_ID
)
SELECT DISTINCT --ОКОНЧАТЕЛЬНАЯ ВЫБОРКА
VSP_OPER_DATA.CLIENT_ID, TO_CHAR(REPORT_DATE, 'MONTH') AS "Report_date", RATIO
FROM VSP_OPER_DATA 
JOIN PERCENTAGE ON VSP_OPER_DATA.CLIENT_ID = PERCENTAGE.CLIENT_ID
ORDER BY VSP_OPER_DATA.CLIENT_ID;

--Задание 4

WITH FROM_VSP AS(
SELECT VSP, MIN(VAL) AS MINIMAL, AVG(VAL) AS AVERAGE, MAX(VAL) AS MAXIMUM, GROUP_VSP
FROM DISTANCE_METRIC
GROUP BY GROUP_VSP, VSP
),
FROM_VSP_E AS(
SELECT MIN(VAL) AS MINIMAL, AVG(VAL) AS AVERAGE, MAX(VAL) AS MAXIMUM, VSP_E, GROUP_VSP
FROM DISTANCE_METRIC
GROUP BY GROUP_VSP, VSP_E--, VSP;
),
SUPPORT AS
(SELECT FROM_VSP_E.MINIMAL, FROM_VSP_E.AVERAGE, FROM_VSP_E.MAXIMUM, VSP, VSP_E, FROM_VSP_E.GROUP_VSP FROM FROM_VSP_E
JOIN FROM_VSP ON FROM_VSP.GROUP_VSP = FROM_VSP_E.GROUP_VSP)

SELECT VSP, ROUND(MIN(MINIMAL), 0), ROUND(AVG(AVERAGE), 0), ROUND(MAX(MAXIMUM), 0), GROUP_VSP
FROM SUPPORT
GROUP BY GROUP_VSP, VSP;

--Задание 5

SELECT USER_ID, --Окончательная выборка
       USER_POSITION,
       MIN(DATE_POSITION) AS POSITION_START,
       MAX(DATE_POSITION) AS POSITION_END
FROM(
    SELECT SUPPORT.*, --Формирование периода дат
           SUM(CHANGING_DATES) OVER(PARTITION BY USER_ID, USER_POSITION ORDER BY DATE_POSITION ASC) AS RANK_OP
    FROM(
        SELECT USER_ID, --Вычисление непрерывного периода дат
               USER_POSITION,
               DATE_POSITION,
               CASE WHEN COALESCE(
                    LAG (DATE_POSITION)
                    OVER (PARTITION BY USER_ID, USER_POSITION ORDER BY DATE_POSITION ASC), DATE_POSITION - 1) = (DATE_POSITION - 1)
               THEN 0 ELSE 1 END CHANGING_DATES
        FROM USERS_POSITION
        ) SUPPORT
    ) SUPPORT
GROUP BY USER_ID, USER_POSITION, RANK_OP
ORDER BY USER_ID, POSITION_START;
